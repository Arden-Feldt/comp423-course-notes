{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Arden's Course Notes","text":"<p>This is my home page. I will use it to organize and share my course notes.</p>"},{"location":"tutorials/go-setup/","title":"Setting up a dev container for Go","text":"<ul> <li> <p>Primary author: Arden Feldt</p> </li> <li> <p>Reviewer: Siddhant Saxena</p> </li> </ul>"},{"location":"tutorials/go-setup/#go-tutorial-with-dev-containers","title":"Go Tutorial with Dev Containers","text":""},{"location":"tutorials/go-setup/#prerequisites","title":"Prerequisites","text":"<p>To follow along with this tutorial you'll need the following three things set up:</p> <ol> <li>Docker</li> <li>Visual Studio Code</li> <li>The Remote - Containers extension installed in VSCode</li> </ol> <p>Warning</p> <p>These must all be installed and open prior to moving on to the next step.</p>"},{"location":"tutorials/go-setup/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"tutorials/go-setup/#step-1-set-up-a-blank-project-directory","title":"Step 1: Set Up a Blank Project Directory","text":"<ol> <li> <p>Create a new blank directory by opening command prompt or terminal:    bash<pre><code>mkdir go-setup-proj\ncd go-setup-proj\n</code></pre></p> </li> <li> <p>Initialize a new git repository:    bash<pre><code>git init\n</code></pre></p> </li> </ol>"},{"location":"tutorials/go-setup/#step-2-create-a-dev-container-configuration","title":"Step 2: Create a Dev Container Configuration","text":"<ol> <li> <p>Create a <code>.devcontainer</code> directory:    bash<pre><code>mkdir .devcontainer\n</code></pre></p> </li> <li> <p>Inside <code>.devcontainer</code>, create a <code>devcontainer.json</code> file. Open VS code and open the directory you just created and then create this new file.</p> </li> <li> <p>Fill with the following content:    json<pre><code>{\n  \"name\": \"Go Dev Container\",\n  \"image\": \"mcr.microsoft.com/devcontainers/go:latest\",\n  \"customizations\": {\n    \"vscode\": {\n      \"extensions\": [\n        \"golang.go\"\n      ]\n    }\n  }\n}\n</code></pre></p> </li> <li> <p>The key components of the configuration are:</p> </li> <li><code>image</code>: Specifies the base image (Microsoft's Go Dev Container).</li> <li><code>features</code>: Ensures Go is installed and up-to-date.</li> <li><code>customizations.vscode.extensions</code>: Installs the official Go plugin by the Go Team at Google.</li> </ol> <p>Note</p> <p>I'm not sure how much of all that is necessary but google said it was good and it worked for me.</p>"},{"location":"tutorials/go-setup/#step-3-open-the-dev-container","title":"Step 3: Open the Dev Container","text":"<ol> <li>Ctrl+Shift+P and select \"Remote-Containers: Reopen in Container\". You may need to select 'go' from a list and click through a few options, just hit 'ok'. Not sure why it did that for me &lt;3.</li> </ol>"},{"location":"tutorials/go-setup/#step-4-verify-go-installation","title":"Step 4: Verify Go Installation","text":"<ol> <li>Check the installed Go version:</li> </ol> bash<pre><code>go version\n</code></pre> <p>Example output:</p> <pre><code>go version go1.23.4 linux/amd64\n</code></pre>"},{"location":"tutorials/go-setup/#step-5-create-a-new-go-project","title":"Step 5: Create a New Go Project","text":"<ol> <li>Initialize a Go module:    bash<pre><code>go mod init hello-comp423\n</code></pre></li> <li>Create a new file named <code>main.go</code> with the following content:    go<pre><code>package main\n\nimport \"fmt\"\n\nfunc main() {\n    fmt.Println(\"Hello, COMP423!\")\n}\n</code></pre></li> <li>Run the program directly:    bash<pre><code>go run main.go\n</code></pre></li> </ol> <p>Output:</p> <pre><code>Hello, COMP423!\n</code></pre> <p>Warning</p> <p>If your output does not match \"Hello, COMP423!\", you've done goofed.</p>"},{"location":"tutorials/go-setup/#step-6-build-it-like-bob","title":"Step 6: Build it like Bob","text":"<ol> <li>Build the binary:    bash<pre><code>go build -o hello main.go\n</code></pre></li> <li>Run the built binary directly:    bash<pre><code>./hello\n</code></pre></li> </ol> <p>Output:</p> <p><pre><code>Hello COMP423\n</code></pre> 3. Difference between <code>go run</code> and <code>go build</code>:</p> <ul> <li> <p><code>go run</code>: Compiles and runs the code in one step, but does not create a standalone executable.</p> </li> <li> <p><code>go build</code>: Compiles the code and generates a standalone executable, allowing the program to be run without <code>go</code> installed.</p> </li> </ul> <p>Note</p> <p>This might feel familiar if you remember the comp211. I however do not, but cool regardless ig.</p>"},{"location":"tutorials/go-setup/#step-7-setting-up-remote-repository-on-github","title":"Step 7: Setting up Remote Repository on Github","text":"<ol> <li>Go here.</li> <li>Enter the following details:<ul> <li>Repository Name: <code>go-program</code></li> <li>Description: <code>a simple go program</code></li> <li>Visibility: <code>public</code></li> </ul> </li> <li>Make sure that you have unchecked the initialization with a README, .gitignore, and lisence.</li> <li>Now run the following code to add the repo: bash<pre><code>git remote add origin https://github.com/&lt;your-username&gt;/go-program.git\n</code></pre></li> <li>Before we add, commit, and push our changes, lets setup a README.md file and link our tutorial in it. Run these lines of code. bash<pre><code>echo \"# Go Program\" &gt; README.md\necho \"https://Arden-Feldt.github.io/comp423-course-notes/\" &gt;&gt; README.md\ngit add README.md\ngit commit -m \"Commit with README\"\n</code></pre></li> </ol>"},{"location":"tutorials/go-setup/#step-8-commit-your-work","title":"Step 8: Commit Your Work","text":"<ol> <li>Add files to the repository:    bash<pre><code>git add .\n</code></pre></li> <li> <p>Commit the changes:    bash<pre><code>git commit -m \"That was easy as a gogo-squeeze\"\n</code></pre></p> </li> <li> <p>Now you are done with the actual Go program, you must now push to remote repository bash<pre><code>git push\n</code></pre></p> </li> </ol> <p>Note</p> <p>Ensure Docker is running before attempting to reopen the project in a container.</p>"},{"location":"tutorials/go-setup/#sources","title":"Sources","text":"<p>comp423: Starting a Static Website Project with MkDocs</p>"}]}